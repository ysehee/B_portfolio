<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bitstudy.app.dao.searchPackageMapper">

    <select id="selectAll" parameterType="map" resultType="PackageCardDto">
        select
            package_info.packageId,
            package_info.packageType,
            packageCategory,
            packageLocation,
            packageImg,
            packageTitle,
            packagePrice,
            MAX(packageStartDate) AS packageStartDate,
            MAX(packageNo) AS packageNo
        from
            package_info
                left join package_content
                    on package_info.packageType = package_content.packageType
                        and package_info.packageId = package_content.packageId
        where packageStartDate >= now()

        <choose>
            <when test="category == '국내'">
                and packageLocation = #{location}
                and packageStartDate >= #{startDate}
            </when>
            <when test="category == '아시아'">
                and packageLocation = #{location}
                and packageStartDate >= #{startDate}
            </when>
            <when test="category == '유럽'">
                and packageLocation = #{location}
                and packageStartDate >= #{startDate}
            </when>
            <when test="category == '아메리카'">
                and packageLocation = #{location}
                and packageStartDate >= #{startDate}
            </when>
        </choose>
        GROUP BY
            packageId,
            packageType,
            packageCategory,
            packageLocation,
            packageImg,
            packageTitle,
            packagePrice;
<!--        order by packageStartDate-->
    </select>
    
    <select id="packageForHome" parameterType="String" resultType="PackageCardDto">
        select
            package_info.packageId,
            package_info.packageType,
            packageCategory,
            packageLocation,
            packageImg,
            packageTitle,
            packagePrice,
            MAX(packageStartDate) AS packageStartDate,
            MAX(packageNo) AS packageNo
        from
            package_info
                left join package_content
                    on package_info.packageType = package_content.packageType
                         and package_info.packageId = package_content.packageId
        where packageStartDate >= now()
        GROUP BY
            packageId,
            packageType,
            packageCategory,
            packageLocation,
            packageImg,
            packageTitle,
            packagePrice
        ORDER BY
            RAND()
        limit 8
    </select>

    <select id="selectAllCount" parameterType="map" resultType="int">
        select count(*)
        from
        package_info
        left join package_content
        on package_info.packageType = package_content.packageType
        and package_info.packageId = package_content.packageId
        where packageStartDate >= now()

        <choose>
            <when test="category == '국내'">
                and packageLocation = #{location}
                and packageStartDate >= #{startDate}
            </when>
            <when test="category == '아시아'">
                and packageLocation = #{location}
                and packageStartDate >= #{startDate}
            </when>
            <when test="category == '유럽'">
                and packageLocation = #{location}
                and packageStartDate >= #{startDate}
            </when>
            <when test="category == '아메리카'">
                and packageLocation = #{location}
                and packageStartDate >= #{startDate}
            </when>
        </choose>
        GROUP BY
        packageId,
        packageType,
        packageCategory,
        packageLocation,
        packageImg,
        packageTitle,
        packagePrice;
        <!--        order by packageStartDate-->
    </select>


    <insert id="insertAll" parameterType="java.util.List">
            insert into package_info (packageType, packageId, packageCategory, packageLocation, packageTheme, packageStartDate, packagePrice, packageRegDate)
        values
        <foreach collection="list" item="packageDto" separator=",">
            ( #{packageDto.packageType},
                concat(#{packageDto.packageCategory}, '_', #{packageDto.packageLocation}, '_', #{packageDto.packageTheme}),
                #{packageDto.packageCategory},
                #{packageDto.packageLocation},
                #{packageDto.packageTheme},
                #{packageDto.packageStartDate},
                #{packageDto.packagePrice},
                now() )
        </foreach>
    </insert>

    <insert id="insertContent" parameterType="java.util.List">
        insert into package_content (packageType, packageId, packageTitle, packageContent)
        values
        <foreach collection="list" item="packageContentDto" separator=",">
            ( #{packageContentDto.packageType},
            #{packageContentDto.packageId},
            #{packageContentDto.packageTitle},
            #{packageContentDto.packageContent})
        </foreach>
    </insert>

    <!-- 페이징 리스트 조회-->
    <select id="packageList" parameterType="java.util.HashMap" resultType="ReviewDto">
        select * from board_table order by id desc limit #{start}, #{limit}
    </select>
    <!--게시물 갯수 조회-->
    <select id="packageCount" resultType="Integer">
        select count(id) from board_table
    </select>


    <delete id="delete" parameterType="map">
        delete from reservation_payment where userId = #{userId} and packageNo = #{packageNo}
    </delete>

</mapper>